package S01.model.admin.eo;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jun 03 13:35:59 PKT 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AdminRightsDetailEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        DetailSno,
        RightsId,
        FormId,
        RInsert,
        RUpdate,
        RDelete,
        RPrint,
        RPosting,
        RFrom,
        RTo,
        EnteredBy,
        EnteredOn,
        LastEditedBy,
        LastEditedOn,
        Active,
        AdminFormDetailEO,
        AdminRightsMasterEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DETAILSNO = AttributesEnum.DetailSno.index();
    public static final int RIGHTSID = AttributesEnum.RightsId.index();
    public static final int FORMID = AttributesEnum.FormId.index();
    public static final int RINSERT = AttributesEnum.RInsert.index();
    public static final int RUPDATE = AttributesEnum.RUpdate.index();
    public static final int RDELETE = AttributesEnum.RDelete.index();
    public static final int RPRINT = AttributesEnum.RPrint.index();
    public static final int RPOSTING = AttributesEnum.RPosting.index();
    public static final int RFROM = AttributesEnum.RFrom.index();
    public static final int RTO = AttributesEnum.RTo.index();
    public static final int ENTEREDBY = AttributesEnum.EnteredBy.index();
    public static final int ENTEREDON = AttributesEnum.EnteredOn.index();
    public static final int LASTEDITEDBY = AttributesEnum.LastEditedBy.index();
    public static final int LASTEDITEDON = AttributesEnum.LastEditedOn.index();
    public static final int ACTIVE = AttributesEnum.Active.index();
    public static final int ADMINFORMDETAILEO = AttributesEnum.AdminFormDetailEO.index();
    public static final int ADMINRIGHTSMASTEREO = AttributesEnum.AdminRightsMasterEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AdminRightsDetailEOImpl() {
    }

    /**
     * Gets the attribute value for DetailSno, using the alias name DetailSno.
     * @return the value of DetailSno
     */
    public Number getDetailSno() {
        return (Number) getAttributeInternal(DETAILSNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for DetailSno.
     * @param value value to set the DetailSno
     */
    public void setDetailSno(Number value) {
        setAttributeInternal(DETAILSNO, value);
    }

    /**
     * Gets the attribute value for RightsId, using the alias name RightsId.
     * @return the value of RightsId
     */
    public Number getRightsId() {
        return (Number) getAttributeInternal(RIGHTSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RightsId.
     * @param value value to set the RightsId
     */
    public void setRightsId(Number value) {
        setAttributeInternal(RIGHTSID, value);
    }

    /**
     * Gets the attribute value for FormId, using the alias name FormId.
     * @return the value of FormId
     */
    public Number getFormId() {
        return (Number) getAttributeInternal(FORMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FormId.
     * @param value value to set the FormId
     */
    public void setFormId(Number value) {
        setAttributeInternal(FORMID, value);
    }

    /**
     * Gets the attribute value for RInsert, using the alias name RInsert.
     * @return the value of RInsert
     */
    public String getRInsert() {
        return (String) getAttributeInternal(RINSERT);
    }

    /**
     * Sets <code>value</code> as the attribute value for RInsert.
     * @param value value to set the RInsert
     */
    public void setRInsert(String value) {
        setAttributeInternal(RINSERT, value);
    }

    /**
     * Gets the attribute value for RUpdate, using the alias name RUpdate.
     * @return the value of RUpdate
     */
    public String getRUpdate() {
        return (String) getAttributeInternal(RUPDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RUpdate.
     * @param value value to set the RUpdate
     */
    public void setRUpdate(String value) {
        setAttributeInternal(RUPDATE, value);
    }

    /**
     * Gets the attribute value for RDelete, using the alias name RDelete.
     * @return the value of RDelete
     */
    public String getRDelete() {
        return (String) getAttributeInternal(RDELETE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RDelete.
     * @param value value to set the RDelete
     */
    public void setRDelete(String value) {
        setAttributeInternal(RDELETE, value);
    }

    /**
     * Gets the attribute value for RPrint, using the alias name RPrint.
     * @return the value of RPrint
     */
    public String getRPrint() {
        return (String) getAttributeInternal(RPRINT);
    }

    /**
     * Sets <code>value</code> as the attribute value for RPrint.
     * @param value value to set the RPrint
     */
    public void setRPrint(String value) {
        setAttributeInternal(RPRINT, value);
    }

    /**
     * Gets the attribute value for RPosting, using the alias name RPosting.
     * @return the value of RPosting
     */
    public String getRPosting() {
        return (String) getAttributeInternal(RPOSTING);
    }

    /**
     * Sets <code>value</code> as the attribute value for RPosting.
     * @param value value to set the RPosting
     */
    public void setRPosting(String value) {
        setAttributeInternal(RPOSTING, value);
    }

    /**
     * Gets the attribute value for RFrom, using the alias name RFrom.
     * @return the value of RFrom
     */
    public Date getRFrom() {
        return (Date) getAttributeInternal(RFROM);
    }

    /**
     * Sets <code>value</code> as the attribute value for RFrom.
     * @param value value to set the RFrom
     */
    public void setRFrom(Date value) {
        setAttributeInternal(RFROM, value);
    }

    /**
     * Gets the attribute value for RTo, using the alias name RTo.
     * @return the value of RTo
     */
    public Date getRTo() {
        return (Date) getAttributeInternal(RTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for RTo.
     * @param value value to set the RTo
     */
    public void setRTo(Date value) {
        setAttributeInternal(RTO, value);
    }

    /**
     * Gets the attribute value for EnteredBy, using the alias name EnteredBy.
     * @return the value of EnteredBy
     */
    public Number getEnteredBy() {
        return (Number) getAttributeInternal(ENTEREDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnteredBy.
     * @param value value to set the EnteredBy
     */
    public void setEnteredBy(Number value) {
        setAttributeInternal(ENTEREDBY, value);
    }

    /**
     * Gets the attribute value for EnteredOn, using the alias name EnteredOn.
     * @return the value of EnteredOn
     */
    public Date getEnteredOn() {
        return (Date) getAttributeInternal(ENTEREDON);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnteredOn.
     * @param value value to set the EnteredOn
     */
    public void setEnteredOn(Date value) {
        setAttributeInternal(ENTEREDON, value);
    }

    /**
     * Gets the attribute value for LastEditedBy, using the alias name LastEditedBy.
     * @return the value of LastEditedBy
     */
    public Number getLastEditedBy() {
        return (Number) getAttributeInternal(LASTEDITEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastEditedBy.
     * @param value value to set the LastEditedBy
     */
    public void setLastEditedBy(Number value) {
        setAttributeInternal(LASTEDITEDBY, value);
    }

    /**
     * Gets the attribute value for LastEditedOn, using the alias name LastEditedOn.
     * @return the value of LastEditedOn
     */
    public Date getLastEditedOn() {
        return (Date) getAttributeInternal(LASTEDITEDON);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastEditedOn.
     * @param value value to set the LastEditedOn
     */
    public void setLastEditedOn(Date value) {
        setAttributeInternal(LASTEDITEDON, value);
    }

    /**
     * Gets the attribute value for Active, using the alias name Active.
     * @return the value of Active
     */
    public String getActive() {
        return (String) getAttributeInternal(ACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Active.
     * @param value value to set the Active
     */
    public void setActive(String value) {
        setAttributeInternal(ACTIVE, value);
    }

    /**
     * @return the associated entity AdminFormDetailEOImpl.
     */
    public AdminFormDetailEOImpl getAdminFormDetailEO() {
        return (AdminFormDetailEOImpl) getAttributeInternal(ADMINFORMDETAILEO);
    }

    /**
     * Sets <code>value</code> as the associated entity AdminFormDetailEOImpl.
     */
    public void setAdminFormDetailEO(AdminFormDetailEOImpl value) {
        setAttributeInternal(ADMINFORMDETAILEO, value);
    }

    /**
     * @return the associated entity AdminRightsMasterEOImpl.
     */
    public AdminRightsMasterEOImpl getAdminRightsMasterEO() {
        return (AdminRightsMasterEOImpl) getAttributeInternal(ADMINRIGHTSMASTEREO);
    }

    /**
     * Sets <code>value</code> as the associated entity AdminRightsMasterEOImpl.
     */
    public void setAdminRightsMasterEO(AdminRightsMasterEOImpl value) {
        setAttributeInternal(ADMINRIGHTSMASTEREO, value);
    }

    /**
     * @param detailSno key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number detailSno) {
        return new Key(new Object[] { detailSno });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("S01.model.admin.eo.AdminRightsDetailEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("ADMIN_RIGHTS_DETAIL_S", getDBTransaction());
        setDetailSno(seq.getSequenceNumber());
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

